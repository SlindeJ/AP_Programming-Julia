<h1>Handbook on Programming in Julia 8</h1>

**AP Computer Science Principles 2023-2024**

Jacob Slinde


<!-- This is a comment (which will not be displayed in the live file);
replace all "???" with your own text. -->


    ADD some actual code later too
    most advice is in my actual programs in comments. I'm just too lazy to transfer it here yet. 
___





<h1>Table of Contents</h1>

- [1. Compiling and Running](#1-compiling-and-running)
- [2. Data Types](#2-data-types)
- [3. Console I/O](#3-console-io)
- [4. Arithmetic Operations](#4-arithmetic-operations)
- [5. Assignment Operations](#5-assignment-operations)
- [6. Comments](#6-comments)
- [7. Decision Structures](#7-decision-structures)
- [8. Conditional Operators](#8-conditional-operators)
- [9. Logic Operators](#9-logic-operators)        add ! "not" to examples 
- [10. Advanced Decision Structures](#10-advanced-decision-structures)
- [11. String Methods](#11-string-methods)
- [12. Random Generation](#12-random-generation)
- [13. Looping Structures](#13-looping-structures)
- [14. Functions/Methods](#14-functionsmethods)
- [15. Elementary Data Structures](#15-elementary-data-structures)
  - [15.1 Arrays/Lists](#151-arrayslists)
  - [15.2 Matrices](#152-matrices)
- [References](#references)

<!-- 
- [16. Major Keywords](#16-major-keywords)
- [17. Error Handling](#17-error-handling)
- [18. Working with Files](#18-working-with-files)
- [19. Major Language Features](#19-major-language-features)
  - [19.1 Classes](#191-classes)
  - [19.2 Inheritance](#192-inheritance)
  - [19.3 Generic Typing (Templates)](#193-generic-typing-templates)
  - [19.4 Pointers](#194-pointers)
- [20. Importing Local Libraries](#20-importing-local-libraries)
- [21. Working with Time](#21-working-with-time)
- [22. Importing Libaries from Package managers](#22-importing-libaries-from-package-managers)
- [23. Bitwise Operators](#23-bitwise-operators)
- [24. Common Data Structures](#24-common-data-structures)
- [25. Advanced Language Features](#25-advanced-language-features)
-->




___





# 1. Compiling and Running 


julia is a compiled language
running a julia program from the shell is typed as follows:
julia Program_Name.jl 
where "Program_Name" is the name of the file

it is important to write julia files with a ".jl" at the end to avoid making a file that doesn't run julia like this one 

___





# 2. Data Types

Interestingly, julia really doesn't have types

in julia, there are no inherint types and everything can be any type of thing 
you do not need to declair any types when making variables and such
x = "look"
x = 1
x = 1.234


most things in julia are type "any" which can literally be anything but there are also types like Int16, Int32, Int64, Float16-64, Strings, and booleans 
x = parse(Float64, x)
x = true


every type in julia is like a "subtype" of the original "any" type
something unexpected i learned was that booleans are considered integers in julia, so math can be done with them 
true is equivilent to 1 and false is equivilent to 0
1000 * false = 0
99 * true = 99

not sure if this goes here but you can also add strings in julia
a = "no" 
b = " u" 
x = a * b
x = "no u"

```LANGUAGE_HERE

```





___





# 3. Console I/O        # I think io stands for in/out

there really arent any specific in or out functions in julia
to print something you can just type 
print("Please enter the string: ")
println("Please enter the string: ")   # adds a linebreak after


to recieve user input just make a variable and set it to take in the user input
x = readline()

julia is cool because you don't need to set the variable to any value so x can be entered as a string or int or float and it will be fine
if you need to make sure a value is an int/float you can use parse
x = readline()  #lets say they enter 1 but you need it as a float
x = parse(Float64, x)
this will change x to the Float64 type






___





# 4. Arithmetic Operations

in julia the operations addition, subtraction, multiplication, and division are done with the following operators
+, -, *, /
1 + 3 = 4
3 - 1 = 2
3 * 3 = 9
10 / 4 = 2.5    # make sure 10 or 4 are a float, or else int division works differently

appatently you can use รท for integer division and you use ^ for exponents
(int division) รท, (and power function) ^
10 รท 2 = 5     # as an int still
3^3 = 27

IMPORTANT:
julia uses the correct order of operations during calculations
1 + 4 / 2 = 3          #make sure no int division 
___





# 5. Assignment Operations

haha julia go brrrrrrrrr
a = "sjfl" 
x = "whatever you want" 
b = 1.92674027738
julia does not care at all
be lazy

___





# 6. Comments

THERE ARE QUITE A FEW THINGS TO NOTE ABOUT IN JULIA
#1. easy one, to comment use the "#" symbol

#2. julia does NOT like a ++ operator
so, x++ will come out to an error unlike x += 1 would

#3. julia's indexes START COUNTING at 1 and range functions are INCLUSIVE especially to the end or maximum range
so in a string of "String", the index at S would be 1. 
in a function that would print x on a line in range (1, 4), it would print as: 
x    #1
x    #2
x    #3
x    #4  
this is important as most other languages do not include the last value

#4. julia can store many different data types in similar areas
data types like ints, floats, strings, and even functions can all be stored in arrays and tuples as follows
a = [1, 2, 3.0, 3, 4.1545, "nou", "the order or size doesn't matter", sin, cos, tan, "you can even have cos ect..."] 

#5. you can leave arrays as undefined so any data type can be added
array = Array{Int64}(undef, 0) # undefined array length 0

#6. often writing in python can actally work exceptionally well in julia and a lot if not all functions will work the same or similarly 

#7. 





___





# 7. Decision Structures


i believe this includes statements like if, else, while, maybe others? 
???





___





# 8. Conditional Operators
I don't really like how julia does these

if a == 10 
  #enact the code if true here
end

I don't really like this method because julia is very forgiving with loop syntax, but it requires the end statement for the end of every condition. it can get very confusing quickly. 

Sample: 
while num1 != 1
  if iseven(num1)
    i = num1
    num1 = num1/2
    println("$i is even, so I take half: $num1")
    atps += 1
  else 
    i = num1
    num1 = 3num1 + 1
    println("$i is odd, so I make 3n+1: $num1")
    atps += 1
  end
end



___





# 9. Logic Operators
This is things like the "and" and "or" operators and how they work
best shown by example

a = 10
b = 20
if a == 10 || b == 10
  println("or")
end

if a == 10 && b == 10
  println("and")
end

This code will only print "or" as the a == 10 statement is true so it runs because only one statement needs to be true. 
It doesn't output "and" because b == 10 is false so both statements aren't true so it doesn't run. 



___





# 10. Advanced Decision Structures

???





___





# 11. String Methods

???





___





# 12. Random Generation

???





___





# 13. Looping Structures

???





___





# 14. Functions/Methods

???





___





# 15. Elementary Data Structures

???





## 15.1 Arrays/Lists

???






## 15.2 Matrices

???





___





<!-- 
EVERYTHING BELOW IS OPTIONAL; 
UNCOMMENT BY REMOVING THE ARROW TAGS SURROUNDING
(i.e., delete the "< !--" and "-- >" tags)

CHANGE THE SECTION NUMBERS AS DESIRED
-->

<!-- # 16. Major Keywords

???





___ -->





<!-- # 17. Error Handling

???





___ -->





<!-- # 18. Working with Files

???





___ -->





<!-- # 19. Major Language Features

???







## 19.1 Classes

???





## 19.2 Inheritance

???





## 19.3 Generic Typing (Templates)

???





## 19.4 Pointers

???





___ -->





<!-- # 20. Importing Local Libraries

???





___ -->





<!-- # 21. Working with Time

???





___ -->





<!-- # 22. Importing Libaries from Package managers

???





___ -->





<!-- # 23. Bitwise Operators

???





___ -->





<!-- # 24. Common Data Structures

???





___ -->





<!-- # 25. Advanced Language Features

???





___ -->





# References

* [Markdown Cheatsheet](https://gist.github.com/jonschlinkert/5854601)
* [description](http://example.com)